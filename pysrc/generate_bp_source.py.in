import os
import pyplusplus
from pyplusplus.module_builder.call_policies import *
from pyplusplus import module_builder
from pygccxml import declarations

def wrap_cmbcv():
    mb = module_builder.module_builder_t(
        files = ["geom2D.hpp"], 
        gccxml_path="@GCCXML_EXECUTABLE@", 
        include_paths=[
            "C:/Python26/include", 
            "../cppsrc/include",
            "@Boost_INCLUDE_DIR@"], 
        indexing_suite_version=2,
        define_symbols=["_HAS_TR1=0"])

    mb.free_operators().exclude()
    mb.member_functions('print').exclude()
    for fn in mb.member_functions('asVec3'):
        fn.call_policies = return_internal_reference()
    # respect explicit constructors
    mb.constructors( lambda c: c.explicit == True ).allow_implicit_conversion = False

    mb.build_code_creator(module_name='cmbcv')
    mb.write_module(os.path.join('generated_code', 'opencmbcv.pypp.cpp'))
    # If all succeeds, record this accomplishment by touching a particular file
    open(os.path.join(os.path.abspath('.'), 'generated_code',
        'generate_bp.stamp'), "w").close()

if __name__ == "__main__":
    wrap_cmbcv()
