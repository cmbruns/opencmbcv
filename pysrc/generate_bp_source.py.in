import os
import pyplusplus
from pyplusplus.module_builder.call_policies import *
from pyplusplus import module_builder
from pygccxml import declarations
from pyplusplus.decl_wrappers.indexing_suite2 import indexing_suite2_t

def wrap_cmbcv():
    mb = module_builder.module_builder_t(
        files = ["wrap_opencmbcv.hpp"], 
        gccxml_path="@GCCXML_EXECUTABLE@", 
        include_paths=[
            "C:/Python26/include", 
            "../cppsrc/include",
            "include",
            "@Boost_INCLUDE_DIR@"], 
        indexing_suite_version=2,
        define_symbols=["_HAS_TR1=0"])

    mb.namespace('cmbcv').include()
    mb.free_operators().exclude()
    mb.member_functions('print').exclude()
    for fn in mb.member_functions('asVec3'):
        fn.call_policies = return_internal_reference()
    for fn in mb.member_functions('begin'):
        fn.exclude()
    for fn in mb.member_functions('end'):
        fn.exclude()
    # respect explicit constructors, which is oddly not the default in py++
    mb.constructors( lambda c: c.explicit == True ).allow_implicit_conversion = False
    wrap_point2(mb)

    mb.build_code_creator(module_name='cmbcv')
    mb.write_module(os.path.join('generated_code', 'opencmbcv.pypp.cpp'))
    # If all succeeds, record this accomplishment by touching a particular file
    open(os.path.join(os.path.abspath('.'), 'generated_code',
        'generate_bp.stamp'), "w").close()

def wrap_point2(mb):
    # wrap vector<double>, just to force pyplusplus to emit indexing suite code
    vec = mb.namespace('std').class_('vector<double>')
    vec.include()
    # make point2 indexable
    point2 = mb.class_('point2_t')
    mb.add_declaration_code('#include "indexing_suite/container_suite.hpp"')
    mb.add_declaration_code('#include "cmbcv_indexing_helpers.hpp"')
    point2.add_registration_code("""
        def(bp::indexing::container_suite<
            cmbcv::point2_t,
            bp::indexing::all_methods,
            list_algorithms<point2_container_traits> >())
    """)

if __name__ == "__main__":
    wrap_cmbcv()
