// This file has been generated by Py++.

#include "boost/python.hpp"

#include "geom2d.hpp"

namespace bp = boost::python;

struct homogeneous_point2_t_wrapper : cmbcv::homogeneous_point2_t, bp::wrapper< cmbcv::homogeneous_point2_t > {

    homogeneous_point2_t_wrapper(cmbcv::homogeneous_point2_t const & arg )
    : cmbcv::homogeneous_point2_t( arg )
      , bp::wrapper< cmbcv::homogeneous_point2_t >(){
        // copy constructor
        
    }

    homogeneous_point2_t_wrapper(::cmbcv::real_t x, ::cmbcv::real_t y, ::cmbcv::real_t w=1.0e+0 )
    : cmbcv::homogeneous_point2_t( x, y, w )
      , bp::wrapper< cmbcv::homogeneous_point2_t >(){
        // constructor
    
    }

    homogeneous_point2_t_wrapper(::cmbcv::vec3_t const & vec3 )
    : cmbcv::homogeneous_point2_t( boost::ref(vec3) )
      , bp::wrapper< cmbcv::homogeneous_point2_t >(){
        // constructor
    
    }

    ::cmbcv::vec3_t const & asVec3(  ) const {
        return cmbcv::homogeneous_point2_t::asVec3(  );
    }

    ::cmbcv::vec3_t & asVec3(  ){
        return cmbcv::homogeneous_point2_t::asVec3(  );
    }

};

struct line2_t_wrapper : cmbcv::line2_t, bp::wrapper< cmbcv::line2_t > {

    line2_t_wrapper(cmbcv::line2_t const & arg )
    : cmbcv::line2_t( arg )
      , bp::wrapper< cmbcv::line2_t >(){
        // copy constructor
        
    }

    line2_t_wrapper(::cmbcv::real_t a, ::cmbcv::real_t b, ::cmbcv::real_t c )
    : cmbcv::line2_t( a, b, c )
      , bp::wrapper< cmbcv::line2_t >(){
        // constructor
    
    }

    line2_t_wrapper(::cmbcv::vec3_t const & vec3 )
    : cmbcv::line2_t( boost::ref(vec3) )
      , bp::wrapper< cmbcv::line2_t >(){
        // constructor
    
    }

    ::cmbcv::vec3_t const & asVec3(  ) const {
        return cmbcv::line2_t::asVec3(  );
    }

    ::cmbcv::vec3_t & asVec3(  ){
        return cmbcv::line2_t::asVec3(  );
    }

};

BOOST_PYTHON_MODULE(cmbcv){
    bp::class_< homogeneous_point2_t_wrapper >( "homogeneous_point2_t", bp::init< cmbcv::real_t, cmbcv::real_t, bp::optional< cmbcv::real_t > >(( bp::arg("x"), bp::arg("y"), bp::arg("w")=1.0e+0 )) )    
        .def_readwrite( "w", &cmbcv::homogeneous_point2_t::w )    
        .def_readwrite( "x", &cmbcv::homogeneous_point2_t::x )    
        .def_readwrite( "y", &cmbcv::homogeneous_point2_t::y )    
        .def_readwrite( "vec", &cmbcv::homogeneous_point2_t::vec )    
        .def( bp::init< cmbcv::vec3_t const & >(( bp::arg("vec3") )) )    
        .def( 
            "asVec3"
            , (::cmbcv::vec3_t const & ( homogeneous_point2_t_wrapper::* )(  ) const)(&homogeneous_point2_t_wrapper::asVec3)
            , bp::return_internal_reference< >() )    
        .def( 
            "asVec3"
            , (::cmbcv::vec3_t & ( homogeneous_point2_t_wrapper::* )(  ) )(&homogeneous_point2_t_wrapper::asVec3)
            , bp::return_internal_reference< >() )    
        .def( 
            "line"
            , (::cmbcv::line2_t ( ::cmbcv::homogeneous_point2_t::* )( ::cmbcv::homogeneous_point2_t const & ) const)( &::cmbcv::homogeneous_point2_t::line )
            , ( bp::arg("rhs") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::homogeneous_point2_t::* )( int ) )( &::cmbcv::homogeneous_point2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::homogeneous_point2_t::* )( int ) const)( &::cmbcv::homogeneous_point2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "size"
            , (unsigned int ( ::cmbcv::homogeneous_point2_t::* )(  ) const)( &::cmbcv::homogeneous_point2_t::size ) );

    bp::class_< line2_t_wrapper >( "line2_t", bp::init< cmbcv::real_t, cmbcv::real_t, cmbcv::real_t >(( bp::arg("a"), bp::arg("b"), bp::arg("c") )) )    
        .def_readwrite( "a", &cmbcv::line2_t::a )    
        .def_readwrite( "b", &cmbcv::line2_t::b )    
        .def_readwrite( "c", &cmbcv::line2_t::c )    
        .def_readwrite( "vec", &cmbcv::line2_t::vec )    
        .def( bp::init< cmbcv::vec3_t const & >(( bp::arg("vec3") )) )    
        .def( 
            "asVec3"
            , (::cmbcv::vec3_t const & ( line2_t_wrapper::* )(  ) const)(&line2_t_wrapper::asVec3)
            , bp::return_internal_reference< >() )    
        .def( 
            "asVec3"
            , (::cmbcv::vec3_t & ( line2_t_wrapper::* )(  ) )(&line2_t_wrapper::asVec3)
            , bp::return_internal_reference< >() )    
        .def( 
            "intersection"
            , (::cmbcv::homogeneous_point2_t ( ::cmbcv::line2_t::* )( ::cmbcv::line2_t const & ) const)( &::cmbcv::line2_t::intersection )
            , ( bp::arg("rhs") ) )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::line2_t::* )( int ) )( &::cmbcv::line2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::line2_t::* )( int ) const)( &::cmbcv::line2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< cmbcv::vec2_t >( "vec2_t", bp::init< cmbcv::real_t, cmbcv::real_t >(( bp::arg("x"), bp::arg("y") )) )    
        .def_readwrite( "x", &cmbcv::vec2_t::x )    
        .def_readwrite( "y", &cmbcv::vec2_t::y )    
        .def_readwrite( "vec", &cmbcv::vec2_t::vec )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::vec2_t::* )( int ) )( &::cmbcv::vec2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::vec2_t::* )( int ) const)( &::cmbcv::vec2_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "size"
            , (unsigned int ( ::cmbcv::vec2_t::* )(  ) const)( &::cmbcv::vec2_t::size ) );

    bp::class_< cmbcv::point2_t, bp::bases< cmbcv::vec2_t > >( "point2_t", bp::init< cmbcv::real_t, cmbcv::real_t >(( bp::arg("x"), bp::arg("y") )) )    
        .def( bp::init< cmbcv::homogeneous_point2_t const & >(( bp::arg("hp") )) )    
        .def( "as__scope_cmbcv_scope_homogeneous_point2_t", &cmbcv::point2_t::operator ::cmbcv::homogeneous_point2_t  );

    bp::implicitly_convertible< cmbcv::point2_t, cmbcv::homogeneous_point2_t >();

    bp::class_< cmbcv::vec3_t >( "vec3_t", bp::init< cmbcv::real_t, cmbcv::real_t, cmbcv::real_t >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) )    
        .def_readwrite( "x", &cmbcv::vec3_t::x )    
        .def_readwrite( "y", &cmbcv::vec3_t::y )    
        .def_readwrite( "z", &cmbcv::vec3_t::z )    
        .def_readwrite( "vec", &cmbcv::vec3_t::vec )    
        .def( 
            "cross"
            , (::cmbcv::vec3_t ( ::cmbcv::vec3_t::* )( ::cmbcv::vec3_t const & ) const)( &::cmbcv::vec3_t::cross )
            , ( bp::arg("rhs") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::vec3_t::* )( int ) )( &::cmbcv::vec3_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::vec3_t::* )( int ) const)( &::cmbcv::vec3_t::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "size"
            , (unsigned int ( ::cmbcv::vec3_t::* )(  ) const)( &::cmbcv::vec3_t::size ) );

    bp::class_< cmbcv::vec_t< 2u > >( "vec_t_less__2u__greater_" )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::vec_t<2u>::* )( int ) const)( &::cmbcv::vec_t< 2u >::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::vec_t<2u>::* )( int ) )( &::cmbcv::vec_t< 2u >::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "size"
            , (unsigned int ( ::cmbcv::vec_t<2u>::* )(  ) const)( &::cmbcv::vec_t< 2u >::size ) );

    bp::class_< cmbcv::vec_t< 3u > >( "vec_t_less__3u__greater_" )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t const & ( ::cmbcv::vec_t<3u>::* )( int ) const)( &::cmbcv::vec_t< 3u >::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "__getitem__"
            , (::cmbcv::real_t & ( ::cmbcv::vec_t<3u>::* )( int ) )( &::cmbcv::vec_t< 3u >::operator[] )
            , ( bp::arg("ix") )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "size"
            , (unsigned int ( ::cmbcv::vec_t<3u>::* )(  ) const)( &::cmbcv::vec_t< 3u >::size ) );
}
